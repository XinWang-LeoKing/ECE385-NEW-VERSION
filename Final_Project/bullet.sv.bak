module tracer_bullet (input hit
							 input [9:0] charc_left, charc_right, charc_top, charc_bot // character
							 );

endmodule


module tracer_bullet_one(input        Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
					 input press_w, press_a, press_s, press_d, // keyboard input
					 input on_ground, on_build, // whether the character is on the ground or on the building
					
					 output logic tracer_direction, // the character face left or face right
					 output logic moving_left, moving_right, moving_up, moving_down // whether the character is moving left/right/up
					 output logic [9:0] top, bot, left, right
                );
	 
    parameter [9:0] X_Min = 10'd0;       // Leftmost point on the X axis
    parameter [9:0] X_Max = 10'd639;     // Rightmost point on the X axis

    parameter [9:0] X_Step = 10'd1;      // Step size on the X axis
    
	logic [9:0] x_in, y_in; // input of register 
	logic [9:0] X_Motion, Y_Motion, X_Motion_in, Y_Motion_in;
	logic frame_clk_delayed, frame_clk_rising_edge;
	
// generating the signal frame_clk_rising_edge
always_ff @ (posedge Clk) begin
		frame_clk_delayed <= frame_clk;
		frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
end
		
// Update registers
always_ff @ (posedge Clk) begin
		if (Reset)
		begin
            left <= left_initial;
            top <= top_initial;
            X_Motion <= 10'd0; // initial still
            Y_Motion <= 10'd0;
		end
		else begin
            x <= x_in;
				X_Motion <= X_Motion_in;
		end
end
	 
	 
	 
always_comb  begin
        // By default, keep motion and position unchanged
        x_in = x;				
		  y_in = y;
        X_Motion_in = X_Motion;	
		  Y_Motion_in = Y_Motion;
		  moving_left = 1'b0;		
		  moving_right = 1'b0;
        
		  
		  

		//if(  >= Y_Max )  // Ball is at the bottom edge, BOUNCE!
			//Y_Motion_in = 1'b0;  // 2's complement.  
      //else if ( top <= Y_Min )  // Ball is at the top edge, BOUNCE!
         //Y_Motion_in = 1'b0;

            // TODO: Add other boundary detections and handle keypress here.
		if (x >= X_Max) //Ball is at right edge. BOUNCE!
			X_Motion_in = 1'b0;
		else if ( left <= X_Min )  // Ball is at the left edge, BOUNCE!
         X_Motion_in = 1'b0;


		  
        // Update position and motion only at rising edge of frame clock
		if (frame_clk_rising_edge)
		begin
				if (show&&~direction) //left
				begin
						 X_Motion_in = (~(X_Step) + 1'b1);
						 moving_left = 1'b1; // ???
				end
				else if (show&&direction) //right
				begin
						 X_Motion_in = X_Step;
						 moving_right = 1'b1; // ???
				end
				x_in = left + X_Motion;
				x_in = top + Y_Motion;
		end
end



								 input [9:0] charc_left, charc_right, charc_top, charc_bot, // character
								 input reset, shoot,
								 input direction,
								 
								 output cd,
								 output hit,
								 
								 output [9:0] bullet_x, bullet_y,
								 output show

								 );

// hit
is_charc is_charc_instance(.X(bullet_x), .Y(bullet_y), .left(charc_left), .right(charc_right), .top(charc_top), .bot(charc_bot), .is_charc(hit));

always_comb begin
	if(shoot&&~bullet_cd&&~direction) begin
		cd = 1'b1;
		bullet_x = ;
		bullet_y = ;
		show = 1'b1;
		
	end
	if(reset) begin
		cd = 1'b0;
		show = 1'b0;
		hit = 1'b0;
	end
	if(hit) begin
		show = 1'b0;
		
	end
	
end

always_ff @ (posedge ) begin
	bullet_x <= ;
	bullet_y <= ;
end

endmodule

/*
module is_hit(input [9:0] left, right, top, bot,

				  output hit // whether the bullet hit another character)
				  );


endmodule*/